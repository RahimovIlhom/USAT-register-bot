from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.types import ReplyKeyboardRemove, InputFile

from data.config import ADMINS, CHANNELS
from filters import IsPrivate
from keyboards.default import language_markup, menu_markup, menu_test_ru, menu_test_uz
from keyboards.inline.checksubs import make_check_channels_subs
from loader import dp, db, bot
from states import RegisterStatesGroup, PINFLStateGroup
from utils.misc import subscription


@dp.message_handler(CommandStart(), IsPrivate(), state='*')
async def bot_start(message: types.Message, state: FSMContext):
    if str(message.from_user.id) in ADMINS:
        await message.answer("Menu", reply_markup=menu_markup)
        await state.finish()
        return
    user = await db.select_user(message.from_user.id)
    if user:
        if user[-1] is None:
            if user[2] == 'uzbek':
                result = "‚ö†Ô∏è Botdan foydalanish JSHSHIR (PINFL) raqamingizni kiriting:"
            else:
                result = "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä –ò–ù–ù (PINFL) –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º:"
            image = InputFile('data/images/jshshir.jpg')
            await message.answer_photo(image, caption=result, reply_markup=ReplyKeyboardRemove())
            await state.set_data({'language': user[2]})
            await PINFLStateGroup.pinfl.set()
            return
        if user[2] == 'uzbek':
            await message.answer("Test topshirish uchun quyidagi tugmadan foydalaning üëá", reply_markup=menu_test_uz)
        else:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç üëá", reply_markup=menu_test_ru)
        await state.finish()
        return
    await message.answer(f"Assalomu alaykum! \"Fan javohirlari\" loyihasining rasmiy botiga xush kelibsiz. "
                         f"Iltimos, tilni tanlang.\n\n"
                         f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ \"Fan javohirlari\". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.",
                         reply_markup=language_markup)
    await state.set_state(RegisterStatesGroup.language)


@dp.message_handler(IsPrivate(), commands=['re_register'])
async def re_register(msg: types.Message, state: FSMContext):
    if str(msg.from_user.id) in ADMINS:
        await msg.answer("Admin uchun ro'yxatdan o'tish shart emas!")
        return
    user = await db.select_user(msg.from_user.id)
    if user:
        await state.set_data({'re_register': True})
        await msg.answer("Iltimos, tilni tanlang.\n\n"
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.", reply_markup=language_markup)
        await state.set_state(RegisterStatesGroup.language)
    else:
        await msg.answer("Siz hali ro'yxatdan o'tmagansiz.\n"
                         "Ro'yxatdan o'tish uchun - /start\n\n"
                         "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.\n–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - /start")


@dp.message_handler(state=PINFLStateGroup.pinfl)
async def add_pinfl_user(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    if language == 'uzbek':
        if len(msg.text) != 14:
            await msg.answer("JSHSHIR (PINFL) to'g'ri kiritilmadi!\nIltimos qayta kiriting:")
            return
        if not msg.text.isnumeric():
            await msg.answer("JSHSHIR (PINFL) faqat raqamlardan tashkil topadi!\nIltimos qayta kiriting:")
            return
        info = "Ma'lumot saqlandi.\nTest topshirish uchun quyidagi tugmadan foydalaning üëá"
        markup = menu_test_uz
    else:
        if len(msg.text) != 14:
            await msg.answer("–ù–æ–º–µ—Ä –ò–ù–ù (PINFL) –≤–≤–µ–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        if not msg.text.isnumeric():
            await msg.answer("–ù–æ–º–µ—Ä –ò–ù–ù (PINFL) –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        info = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç üëá"
        markup = menu_test_ru
    await db.update_pinfl(msg.from_user.id, msg.text)
    await msg.answer(info, reply_markup=markup)
    await state.finish()


@dp.callback_query_handler(text="check_subs", state='*')
async def checker(call: types.CallbackQuery):
    await call.answer()
    user = await db.select_user(call.from_user.id)
    result = str()
    channels = []
    final_status = True
    for channel in CHANNELS:
        status = await subscription.check(user_id=call.from_user.id,
                                          channel=channel)
        channel = await bot.get_chat(channel)
        final_status *= status
        if not status:
            channels.append(channel)
            if user[2] == 'uzbek':
                result += f"‚ÑπÔ∏è <b>{channel.title}</b> kanaliga obuna bo'lmagansiz!\n\n"
            else:
                result += f"‚ÑπÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª <b>{channel.title}</b>!\n\n"
    await call.message.delete()
    if final_status:
        if user[2] == 'uzbek':
            result = "‚úÖ Barcha kanallarga a'zo bo'ldingiz!"
        else:
            result = "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!"
        await call.message.answer(result, disable_web_page_preview=True)
        return
    if user[2] == 'uzbek':
        result += "‚ö†Ô∏è Botdan foydalanish uchun quyidagi kanallarga obuna bo'ling:\n"
    else:
        result += "‚ö†Ô∏è –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:\n"
    await call.message.answer(result, reply_markup=await make_check_channels_subs(channels, lang=user[2]),
                              disable_web_page_preview=True)
